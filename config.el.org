* Lexical binding
#+BEGIN_SRC emacs-lisp

  ;; -*- lexical-binding: t -*-

#+END_SRC

* Packages
** Use-package setup
#+BEGIN_SRC emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

#+END_SRC

** try
#+BEGIN_SRC emacs-lisp

  (use-package try
    :ensure t)

#+END_SRC

** pretty-symbols
#+BEGIN_SRC emacs-lisp

  (use-package pretty-symbols
    :ensure t
    :config
    (global-prettify-symbols-mode))

  (defun add-pretty-symbols-list (symbols)
    "Add a list of prettified symbol-pairs to the buffer-local prettify-symbols-alist"
    (setq-local prettify-symbols-alist (append prettify-symbols-alist
                                               symbols)))

  (defun add-pretty-symbols-hook (mode-hook symbols)
    "Add a list of prettified symbol-pairs to a given mode."
    (add-hook mode-hook `(lambda ()
                          (add-pretty-symbols-list (quote ,symbols)))))

  (defvar double-struck-letters
    '(("|A|" . ?ùî∏)
      ("|B|" . ?ùîπ)
      ("|C|" . ?‚ÑÇ)
      ("|D|" . ?ùîª)
      ("|E|" . ?ùîº)
      ("|F|" . ?ùîΩ)
      ("|G|" . ?ùîæ)
      ("|H|" . ?‚Ñç)
      ("|I|" . ?ùïÄ)
      ("|J|" . ?ùïÅ)
      ("|K|" . ?ùïÇ)
      ("|L|" . ?ùïÉ)
      ("|M|" . ?ùïÑ)
      ("|N|" . ?‚Ñï)
      ("|O|" . ?ùïÜ)
      ("|P|" . ?‚Ñô)
      ("|Q|" . ?‚Ñö)
      ("|R|" . ?‚Ñù)
      ("|S|" . ?ùïä)
      ("|T|" . ?ùïã)
      ("|U|" . ?ùïå)
      ("|V|" . ?ùïç)
      ("|W|" . ?ùïé)
      ("|X|" . ?ùïè)
      ("|Y|" . ?ùïê)
      ("|Z|" . ?‚Ñ§)
      ("|gamma|" . ?‚ÑΩ)
      ("|Gamma|" . ?‚Ñæ)
      ("|pi|" . ?‚Ñº)
      ("|Pi|" . ?‚Ñø)))

  (defvar arrows
    '(("->" . ?‚Üí)
      ("-->" . ?‚ü∂)
      ("<-" . ?‚Üê)
      ("<--" . ?‚üµ)
      ("<->" . ?‚Üî)
      ("<-->" . ?‚ü∑)
      ("=>" . ?‚áí)
      ("==>" . ?‚üπ)
      ("<==" . ?‚ü∏)
      ("<=>" . ?‚áî)
      ("<==>" . ?‚ü∫)
      ("|->" . ?‚Ü¶)
      ("|-->" . ?‚üº)
      ("<-|" . ?‚Ü§)
      ("<--|" . ?‚üª)
      ("|=>" . ?‚§á)
      ("|==>" . ?‚üæ)
      ("<=|" . ?‚§Ü)
      ("<==|" . ?‚üΩ)
      ("~>" . ?‚áù)
      ("<~" . ?‚áú)
      (">->" . ?‚Ü£)
      ("<-<" . ?‚Ü¢)
      ("->>" . ?‚Ü†)
      ("<<-" . ?‚Üû)
      (">->>" . ?‚§ñ)
      ("<<-<" . ?‚¨ª)
      ("<|-" . ?‚áΩ)
      ("-|>" . ?‚áæ)
      ("<|-|>" . ?‚áø)
      ("<-/-" . ?‚Üö)
      ("-/->" . ?‚Üõ)
      ("<-|-" . ?‚á∑)
      ("-|->" . ?‚á∏)
      ("<-|->" . ?‚áπ)
      ("<-||-" . ?‚á∫)
      ("-||->" . ?‚áª)
      ("<-||->" . ?‚áº)
      ("-o->" . ?‚á¥)
      ("<-o-" . ?‚¨∞)))

  (defvar mathematical-symbols
    '(("forall" . ?‚àÄ)
      ("exists" . ?‚àÉ)
      ("not" . ?¬¨)
      ("&&" . ?‚àß)
      ("||" . ?‚à®)
      ("==" . ?‚â°)
      ("/=" . ?‚â†)
      ("!=" . ?‚â†)
      ("<=" . ?‚â§)
      (">=" . ?‚â•)
      ("/<" . ?‚âÆ)
      ("/>" . ?‚âØ)
      ("++" . ?‚ß∫)
      ("+++" . ?‚ßª)
      ("|||" . ?‚´¥)
      ("empty" . ?‚àÖ)
      ("elem" . ?‚àà)
      ("notElem" . ?‚àâ)
      ("member" . ?‚àà)
      ("notMember" . ?‚àâ)
      ("union" . ?‚à™)
      ("intersection" . ?‚à©)
      ("subsetOf" . ?‚äÜ)
      ("properSubsetOf" . ?‚äÇ)
      ("<<" . ?‚â™)
      (">>" . ?‚â´)
      ("<<<" . ?‚ãò)
      (">>>" . ?‚ãô)
      ("<|" . ?‚ä≤)
      ("|>" . ?‚ä≥)
      ("><" . ?‚ãà)
      (":=" . ?‚âî)
      ("=:" . ?‚âï)
      ("<+>" . ?‚äï)
      ("<*>" . ?‚äõ)))

  (defvar greek-letters
    '(("alpha" . ?Œ±)
      ("beta" . ?Œ≤)
      ("gamma" . ?Œ≥)
      ("delta" . ?Œ¥)
      ("epsilon" . ?Œµ)
      ("zeta" . ?Œ∂)
      ("eta" . ?Œ∑)
      ("theta" . ?Œ∏)
      ("iota" . ?Œπ)
      ("kappa" . ?Œ∫)
      ("lambda" . ?Œª)
      ("mu" . ?Œº)
      ("nu" . ?ŒΩ)
      ("xi" . ?Œæ)
      ("omicron" . ?Œø)
      ("pi" . ?œÄ)
      ("rho" . ?œÅ)
      ("sigma_final" . ?œÇ)
      ("sigma" . ?œÉ)
      ("tau" . ?œÑ)
      ("upsilon" . ?œÖ)
      ("phi" . ?œÜ)
      ("chi" . ?œá)
      ("psi" . ?œà)
      ("omega" . ?œâ)))

#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

#+END_SRC

** web-mode
#+BEGIN_SRC emacs-lisp

  (use-package web-mode
    :ensure t
    :mode (("\\.html?\\'" . web-mode)
           ("\\.php?\\'"  . web-mode)
           ("\\.js?\\'"   . web-mode)
           ("\\.css?\\'"  . web-mode)))

#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp

  (use-package magit
    :ensure t
    :config
    (defun my-magit-status ()
      (interactive)
      (if (string= (buffer-name) "jetbrains-idea-ce")
          (magit-status-internal "~/data/programming/Terasology/")
        (magit-status)))
    :bind
    (("C-c g" . my-magit-status)))

#+END_SRC

** evil
#+BEGIN_SRC emacs-lisp

  (use-package evil
    :ensure t
    :config
    ;; Make Evil's point behave more like Emacs'
    (setq evil-want-change-word-to-end nil)
    (setq evil-move-cursor-back nil)
    (evil-mode))

#+END_SRC

*** evil-surround
#+BEGIN_SRC emacs-lisp

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))

#+END_SRC

*** evil-cleverparens
#+BEGIN_SRC emacs-lisp

  (defun global-evil-cleverparens-mode ()
    "Custom wrapper to enable evil-cleverparens-mode globally."
    (interactive)
    (add-hook 'evil-local-mode-hook #'evil-cleverparens-mode))

  (use-package evil-cleverparens
    :ensure t
    :config
    (global-evil-cleverparens-mode))

#+END_SRC

** exwm
#+BEGIN_SRC emacs-lisp

  (use-package exwm
    :ensure t
    :config
    (require 'exwm)
    (require 'exwm-config)

    ;; Set the initial workspace number.
    (setq exwm-workspace-number 0)
    ;; Make class name the buffer name
    (add-hook 'exwm-update-class-hook
              (lambda ()
                (exwm-workspace-rename-buffer exwm-class-name)))

    ;; Don't use evil-mode in exwm buffers
    (add-to-list 'evil-emacs-state-modes 'exwm-mode)

    ;; 's-w': Switch workspace
    (exwm-input-set-key (kbd "s-w") #'exwm-workspace-switch)
    ;; 's-N': Switch to certain workspace
    (dotimes (i 10)
      (exwm-input-set-key (kbd (format "s-%d" i))
                          `(lambda ()
                             (interactive)
                             (exwm-workspace-switch-create ,i))))
    ;; 's-r': Launch application
    (exwm-input-set-key (kbd "s-r")
                        (lambda (command)
                          (interactive (list (read-shell-command "$ ")))
                          (start-process-shell-command command nil command)))

    ;; Better window management
    (exwm-input-set-key (kbd "s-h") 'windmove-left)
    (exwm-input-set-key (kbd "s-j") 'windmove-down)
    (exwm-input-set-key (kbd "s-k") 'windmove-up)
    (exwm-input-set-key (kbd "s-l") 'windmove-right)

    (exwm-input-set-key (kbd "s-s") 'split-window-right)
    (exwm-input-set-key (kbd "s-v") 'split-window-vertically)

    (advice-add 'split-window-right :after 'windmove-right)
    (advice-add 'split-window-vertically :after 'windmove-down)

    (exwm-input-set-key (kbd "s-d") 'delete-window)
    (exwm-input-set-key (kbd "s-q") '(lambda ()
                                       (interactive)
                                       (kill-buffer (current-buffer))))

    ;; Save my hands
    (exwm-input-set-key (kbd "s-f") 'find-file)
    (exwm-input-set-key (kbd "s-b") 'ido-switch-buffer)

    (exwm-input-set-key (kbd "s-w") 'save-buffer)

    ;; Swap between qwerty and Dvorak with the same keyboard key
    (exwm-input-set-key (kbd "s-;") '(lambda ()
                                       (interactive)
                                       (start-process-shell-command "aoeu" nil "aoeu")
                                       (message "Qwerty")))
    (exwm-input-set-key (kbd "s-z") '(lambda ()
                                       (interactive)
                                       (start-process-shell-command "asdf" nil "asdf")
                                       (message "Dvorak")))

    ;; Line-editing shortcuts
    (exwm-input-set-simulation-keys
     '(([?\C-b] . left)
       ([?\C-f] . right)
       ([?\M-f] . C-right)
       ([?\M-b] . C-left)
       ([?\C-y] . S-insert)
       ([?\C-p] . up)
       ([?\C-n] . down)
       ([?\C-a] . home)
       ([?\C-e] . end)
       ([?\M-v] . prior)
       ([?\C-v] . next)
       ([?\C-d] . delete)
       ([?\C-k] . (S-end delete))))
    ;; Configure Ido
    (exwm-config-ido)
    ;; Other configurations
    (exwm-config-misc)

    ;; Allow switching buffers between workspaces
    (setq exwm-workspace-show-all-buffers t)
    (setq exwm-layout-show-all-buffers t)

    (call-process-shell-command "~/data/scripts/startup.sh"))

#+END_SRC

** smex
#+BEGIN_SRC emacs-lisp

  (use-package smex
    :ensure t
    :bind
    (("M-x" . smex)))

#+END_SRC

** zenburn-theme
#+BEGIN_SRC emacs-lisp

  (use-package zenburn-theme
    :ensure t
    :config
    (load-theme 'zenburn t))

  ;; Lots of improvements from https://gist.github.com/belak/ca1c9ae75e53324ee16e2e5289a9c4bc
  ;; TODO: add moree, and check out other configs, starter packs, etc.
  ;; TODO: maybe configure fonts?
  ;; TODO: properly setup evil-mode bindings
#+END_SRC

** ido
*** ido
#+BEGIN_SRC emacs-lisp

  (use-package ido
    :ensure t
    :config
    (ido-mode 1)
    (ido-everywhere t)
    (setq ido-enable-flex-matching t)
    (setq ido-create-new-buffer 'always))

#+END_SRC

*** ido-ubiquitous
#+BEGIN_SRC emacs-lisp

  (use-package ido-ubiquitous
    :ensure t
    :config
    (ido-ubiquitous-mode))

#+END_SRC

*** ido-vertical-mode
#+BEGIN_SRC emacs-lisp

  (use-package ido-vertical-mode
    :ensure t
    :config
    (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right
          ido-vertical-show-count t)
    (ido-vertical-mode 1))

#+END_SRC

*** flx-ido
#+BEGIN_SRC emacs-lisp

  (use-package flx-ido
    :ensure t
    :config
    (flx-ido-mode 1))

#+END_SRC

** org
#+BEGIN_SRC emacs-lisp

  (use-package org
    :ensure t
    :config
    (setq org-refile-use-outline-path 'file)
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (setq org-agenda-span 21)
    (setq org-directory "~/data/org")
    (setq org-agenda-files '("~/data/org/inbox.org"
                             "~/data/org/waiting.org"
                             "~/data/org/calendar.org"
                             "~/data/org/actions.org"
                             "~/data/org/projects.org"
                             "~/data/org/someday.org"
                             "~/data/org/review.org"
                             "~/data/org/reference.org"))
    (setq org-refile-targets '((org-agenda-files :maxlevel . 2)
                               ("~/data/org/archive/archive-projects.org" :level . 1)
                               ("~/data/org/archive/archive-actions.org" :level . 1)))
    (setf org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
    (setq org-capture-templates
          '(("i" "Capture to inbox"
             entry (file "~/data/org/inbox.org") "* %?")
            ("f" "Capture to inbox with a link to the current file"
             entry (file "~/data/org/inbox.org") "* %?\n  %a")))
    (setq org-default-notes-file (concat org-directory "/inbox.org"))
    (defun find-org-directory () (interactive) (find-file org-directory))
    (defun my-org-capture () (interactive) (org-capture nil "i"))
    (defun my-org-time-stamp ()
      "Add a timestamp to an org-mode heading.
  Put the timestamp on a newline, like org-schedule."
      (interactive)
      (let ((inhibit-quit t))
        (save-excursion
          (evil-open-below 1)
          (unless (with-local-quit (org-time-stamp nil))
            (call-interactively 'evil-delete-whole-line)))
        (evil-normal-state)))

    (add-pretty-symbols-hook 'org-mode-hook double-struck-letters)
    (add-pretty-symbols-hook 'org-mode-hook mathematical-symbols)
    (add-pretty-symbols-hook 'org-mode-hook arrows)
    (add-pretty-symbols-hook 'org-mode-hook greek-letters)

    :bind
    (("C-c c" . my-org-capture)
     ("C-c a" . org-agenda)
     ("C-c o" . find-org-directory)
     ("C-c d" . my-org-time-stamp)))

#+END_SRC

** auto-complete
#+BEGIN_SRC emacs-lisp

  (use-package auto-complete
    :ensure t
    :config
    (ac-config-default)
    (global-auto-complete-mode))

#+END_SRC

** eclim
#+BEGIN_SRC emacs-lisp

  (use-package eclim
    :ensure t
    :config
    (setq eclim-executable "/home/mitch/programs/eclipse-neon/eclim")
    (add-hook 'java-mode-hook 'eclim-mode)
    ;; Fixes a problem with multi-project eclim projects adding the project name twice
    (defun my-eclim-fix-relative-path (path)
      (replace-regexp-in-string "^.*src/" "src/" path))
    (advice-add 'eclim--project-current-file :filter-return #'my-eclim-fix-relative-path))

#+END_SRC

** ace-jump-mode
#+BEGIN_SRC emacs-lisp

  (use-package ace-jump-mode
    :ensure t
    :config
    ;; Only search in the current frame
    ;; Might need to be adjusted if I want multi-monitor jumping
    ;; Currently exwm frames are always marked as visible, so 'visible won't work
    ;; (mapcar 'frame-visible-p (frame-list)) => (t t t t t t t)
    (setq ace-jump-mode-scope 'frame)
    :init
    (evil-define-key '(normal motion) global-map "s" 'evil-ace-jump-word-mode)
    :bind
    (("C-l" . ace-jump-word-mode)))

#+END_SRC

** relative line numbers

If I'm using the experimental line-numbers build, use the line-number features from that build.
Otherwise, use linum-relative.

#+BEGIN_SRC emacs-lisp

  (if (boundp 'display-line-numbers)
      (setq-default display-line-numbers 'relative)
    (use-package linum-relative
      :ensure t
      :config
      (setq linum-relative-current-symbol "-->")
      (setq linum-relative-format "%3s ")
      (linum-relative-global-mode)))

#+END_SRC

** rainbow-delimiters
#+BEGIN_SRC emacs-lisp

  (use-package rainbow-delimiters
    :ensure t
    :config
    (rainbow-delimiters-mode 1))

#+END_SRC

** paredit
#+BEGIN_SRC emacs-lisp

  (use-package paredit
    :ensure t)

#+END_SRC

** gnus
#+BEGIN_SRC emacs-lisp

  (use-package gnus
    :ensure t
    :config
    (org-babel-load-file (concat user-emacs-directory "gnus.el.org")))

#+END_SRC

** gpg
#+BEGIN_SRC emacs-lisp

  (setq epa-pinentry-mode 'loopback)
  (pinentry-start)

#+END_SRC

** haskell
#+BEGIN_SRC emacs-lisp

  (use-package haskell-mode
    :ensure t
    :config
    (add-pretty-symbols-hook 'haskell-mode-hook '(("::" . ?‚à∑))))

#+END_SRC

** Custom loads
#+BEGIN_SRC emacs-lisp

  (add-to-list 'load-path (concat user-emacs-directory "sources/exlb"))
  (add-to-list 'load-path (concat user-emacs-directory "sources/exwm"))

#+END_SRC

* General settings
** UI
#+BEGIN_SRC emacs-lisp

  (blink-cursor-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
  (display-time)

#+END_SRC

** Consistent prompts
#+BEGIN_SRC emacs-lisp

  (fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC

** Don't ask about creating new buffer
#+BEGIN_SRC emacs-lisp

  (setq confirm-nonexistent-file-or-buffer nil)

#+END_SRC

** Use the primary clipboard for emacs
#+BEGIN_SRC emacs-lisp

  (setq select-enable-primary t)
  (setq-default indent-tabs-mode nil)

#+END_SRC

** Make tab try to autocomplete
#+BEGIN_SRC emacs-lisp

  (setq tab-always-indent 'complete)

#+END_SRC

** Scroll by one line at a time
#+BEGIN_SRC emacs-lisp

  ;; But on big jumps, re-center ponit
  (setq scroll-conservatively 5)

#+END_SRC

** Put all backup files into ~/tmp/backups
#+BEGIN_SRC emacs-lisp

  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq backup-by-copying t)

#+END_SRC

** Show the matching paren
#+BEGIN_SRC emacs-lisp

  (show-paren-mode 1)
  (setq show-paren-delay 0)

#+END_SRC

** Help at point
#+BEGIN_SRC emacs-lisp

  (setq help-at-pt-display-when-idle t)
  (setq help-at-pt-timer-delay 0)
  (help-at-pt-set-timer)

#+END_SRC

** Set the font
#+BEGIN_SRC emacs-lisp

  (set-face-attribute 'default nil :height 135 :weight 'normal)
  (setq-default line-spacing 4)

#+END_SRC

** Automatically revert files if their contents changes on disk
Todo: make Emacs ask whether to revert modified buffer when it is modified on disk
#+BEGIN_SRC emacs-lisp

  (global-auto-revert-mode 1)

#+END_SRC

** Show trailing whitespace
Todo: make trailing whitespace only show when you have left Evil insert state
#+BEGIN_SRC emacs-lisp

  (setq-default show-trailing-whitespace t)

#+END_SRC

** Minibuffer
#+BEGIN_SRC emacs-lisp

  ;; Allow to read from minibuffer while in minibuffer.
  (setq enable-recursive-minibuffers t)

  ;; Show the minibuffer depth (when larger than 1)
  (minibuffer-depth-indicate-mode 1)

#+END_SRC

** Server start
#+BEGIN_SRC emacs-lisp

  (server-start)

#+END_SRC

* Custom functions
** eval-current-sexp
#+BEGIN_SRC emacs-lisp

  (defun eval-current-sexp (arg)
    "Evaluate the current sexp (or the last sexp, if immediately following a )"
    (interactive "P")
    (save-excursion
      (unless (looking-at ")")
        (backward-char))
      (paredit-forward-up)
      (eval-last-sexp arg)))
  (define-key global-map (kbd "C-c e") 'eval-current-sexp)

#+END_SRC

** rename-file-and-buffer
#+BEGIN_SRC emacs-lisp

  (defun rename-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME.
  Taken from Steve Yegge's config (https://sites.google.com/site/steveyegge2/my-dot-emacs-file)."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (cond ((not filename)
             (message "Buffer '%s' is not visiting a file!" name))
            ((get-buffer new-name)
             (message "A buffer named '%s' already exists!" new-name))
            (t
             (rename-file filename new-name 1)
             (rename-buffer new-name)
             (set-visited-file-name new-name)
             (set-buffer-modified-p nil)))))

#+END_SRC

** move-buffer-file
#+BEGIN_SRC emacs-lisp

  (defun move-buffer-file (dir)
    "Moves both current buffer and file it's visiting to DIR.
  Taken from Steve Yegge's config (https://sites.google.com/site/steveyegge2/my-dot-emacs-file)."
    (interactive "DNew directory: ")
    (let* ((name (buffer-name))
           (filename (buffer-file-name))
           (dir
            (if (string-match dir "\\(?:/\\|\\\\)$")
                (substring dir 0 -1) dir))
           (newname (concat dir "/" name)))
      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (copy-file filename newname 1)
        (delete-file filename)
        (set-visited-file-name newname)
        (set-buffer-modified-p nil))))

#+END_SRC

** auto-sharp-quote
#+BEGIN_SRC emacs-lisp

  (defun auto-sharp-quote ()
    "Insert #' unless in a string or comment.
    From http://endlessparentheses.com/get-in-the-habit-of-using-sharp-quote.html"
    (interactive)
    (call-interactively #'self-insert-command)
    (let ((ppss (syntax-ppss)))
      (unless (or (elt ppss 3))
        (elt ppss 4)
        (eq (char-after) ?')
        (insert "'"))))

  (evil-define-key 'normal-state 'emacs-lisp-mode-map "#" #'auto-sharp-quote)
  (define-key emacs-lisp-mode-map "#" #'auto-sharp-quote)

#+END_SRC

